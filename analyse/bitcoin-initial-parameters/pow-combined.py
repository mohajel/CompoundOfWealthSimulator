import numpy as np
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import beta

# IMPORTANT: change this based on your test cases
totall_coins_value = 50050


pow_data = "pow-bitcoin.txt"
geometric_data = "geometric-bitcoin.txt"

file_name = pow_data
print("File name: ", file_name)

# read data from file
data = np.loadtxt(file_name)

# get only second set of samples
samples = data[:,1]
# samples = data[:,0]

# print samples 
print(samples)

# divide all samples to totall_coins_value for normalization
samples = samples / totall_coins_value

plt.hist(samples, bins=100, density=True, histtype='stepfilled', label='Simulator Results', color="red")



import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline, BSpline
from scipy.interpolate import interp1d

x = [0.02077922077922078, 0.045454545454545456, 0.07012987012987013, 0.0987012987012987, 0.11948051948051948, 0.15194805194805194, 0.17922077922077922, 0.21428571428571427, 0.24675324675324675, 0.2818181818181818, 0.2961038961038961, 0.2961038961038961, 0.2987012987012987, 0.3025974025974026, 0.3025974025974026, 0.3077922077922078, 0.3103896103896104, 0.3103896103896104, 0.3103896103896104, 0.312987012987013, 0.312987012987013, 0.3155844155844156, 0.3181818181818182, 0.3181818181818182, 0.3181818181818182, 0.3207792207792208, 0.3181818181818182, 0.3181818181818182, 0.3207792207792208, 0.3207792207792208, 0.3233766233766234, 0.3233766233766234, 0.3233766233766234, 0.3233766233766234, 0.3246753246753247, 0.32597402597402597, 0.32597402597402597, 0.32597402597402597, 0.33636363636363636, 0.34025974025974026, 0.34025974025974026, 0.34025974025974026, 0.34155844155844156, 0.34675324675324676, 0.34805194805194806, 0.35064935064935066, 0.35064935064935066, 0.35064935064935066, 0.35454545454545455, 0.35324675324675325, 0.35454545454545455, 0.35324675324675325, 0.35064935064935066, 0.35584415584415585, 0.35454545454545455, 0.35844155844155845, 0.35454545454545455, 0.35844155844155845, 0.36103896103896105, 0.36103896103896105, 0.36103896103896105, 0.36233766233766235, 0.36493506493506495, 0.36753246753246754, 0.36753246753246754, 0.36883116883116884, 0.37142857142857144, 0.37792207792207794, 0.3922077922077922, 0.43246753246753245, 0.4623376623376623, 0.4922077922077922, 0.5142857142857142, 0.5363636363636364]
y = [0, 0, 0.0429553264604811, 0.12886597938144329, 0.0429553264604811, 0.0429553264604811, 0.0859106529209622, 0.0429553264604811, 0.0859106529209622, 0.0859106529209622, 0.6013745704467354, 1.4175257731958764, 2.2336769759450172, 2.963917525773196, 4.209621993127148, 5.283505154639175, 6.185567010309279, 7.4312714776632305, 8.505154639175258, 9.36426116838488, 10.223367697594501, 11.855670103092784, 12.714776632302405, 12.714776632302405, 13.745704467353953, 14.47594501718213, 15.420962199312715, 16.237113402061855, 17.13917525773196, 18.170103092783506, 19.286941580756015, 20.017182130584192, 21.00515463917526, 22.121993127147768, 23.367697594501717, 24.0979381443299, 25.042955326460483, 25.9020618556701, 26.675257731958762, 25.558419243986254, 24.871134020618555, 24.18384879725086, 23.195876288659793, 22.164948453608247, 21.176975945017183, 20.274914089347078, 19.45876288659794, 18.513745704467354, 17.56872852233677, 16.88144329896907, 16.323024054982817, 15.6786941580756, 14.690721649484535, 13.616838487972508, 12.242268041237113, 11.211340206185566, 10.223367697594501, 9.3213058419244, 8.161512027491408, 7.302405498281787, 6.443298969072165, 5.670103092783505, 4.68213058419244, 3.6082474226804124, 2.8780068728522337, 2.0189003436426116, 1.4604810996563573, 0.4725085910652921, 0.12886597938144329, 0, 0, 0, 0, -0.0429553264604811]


xy = np.array([x, y]).T
_, unique_indices = np.unique(xy[:, 0], return_index=True)

unique_x = xy[unique_indices, 0]
unique_y = xy[unique_indices, 1]



xnew = np.linspace(min(unique_x), max(unique_x), 200) 


# f = interp1d(unique_x, unique_y, kind='quadratic')

# y_smooth=f(xnew)

# plt.plot (xnew,y_smooth)
# plt.scatter (x, y)

spl = make_interp_spline(unique_x, unique_y, k=1)
y_smooth = spl(xnew)

# plt.plot(unique_x,unique_y)
plt.plot(xnew, y_smooth, label='Paper Results', color="black")





# # add labels
plt.xlabel("Fraction Of Stake")
plt.ylabel("Density")

# add grid, legend and title AND show plot
plt.grid(True)
plt.legend()
plt.title("Compare Simulators POW Distribution Form With Paper Results")
plt.show()

# save plot as png file
# plt.savefig("simple"+".png")




