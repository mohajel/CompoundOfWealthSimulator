import numpy as np
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import beta

# IMPORTANT: change this based on your test cases
totall_coins_value = 50050

geometric_data = "geometric-bitcoin.txt"
file_name = geometric_data
print("File name: ", file_name)

# read data from file
data = np.loadtxt(file_name)

# get only second set of samples
samples = data[:,1]
# samples = data[:,0]

# print samples 
print(samples)

# divide all samples to totall_coins_value for normalization
samples = samples / totall_coins_value

plt.hist(samples, bins=100, density=True, histtype='stepfilled', label='Samples')


import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline, BSpline
from scipy.interpolate import interp1d

x = [0.02077922077922078, 0.045454545454545456, 0.07012987012987013, 0.09220779220779221, 0.11428571428571428, 0.12207792207792208, 0.13506493506493505, 0.14545454545454545, 0.15584415584415584, 0.17272727272727273, 0.18441558441558442, 0.19350649350649352, 0.2025974025974026, 0.21298701298701297, 0.22077922077922077, 0.23376623376623376, 0.24805194805194805, 0.2649350649350649, 0.2766233766233766, 0.2844155844155844, 0.2935064935064935, 0.3090909090909091, 0.33506493506493507, 0.3220779220779221, 0.35194805194805195, 0.35974025974025975, 0.37532467532467534, 0.38831168831168833, 0.3922077922077922, 0.3961038961038961, 0.4025974025974026, 0.4025974025974026, 0.4090909090909091, 0.42207792207792205, 0.43246753246753245, 0.45194805194805193, 0.4662337662337662, 0.4701298701298701, 0.4857142857142857, 0.4857142857142857, 0.44155844155844154, 0.4935064935064935, 0.5012987012987012, 0.5064935064935064, 0.5064935064935064, 0.5207792207792208, 0.5207792207792208, 0.5324675324675324, 0.538961038961039, 0.5467532467532468, 0.5636363636363636, 0.5753246753246753, 0.5948051948051948, 0.6220779220779221, 0.6428571428571429]
y = [0.0859106529209622, 0.0859106529209622, -0.0859106529209622, 0.12886597938144329, 0.25773195876288657, 0.429553264604811, 0.6013745704467354, 0.7302405498281787, 1.0738831615120275, 1.245704467353952, 1.4604810996563573, 1.675257731958763, 1.8900343642611683, 2.1907216494845363, 2.577319587628866, 2.9209621993127146, 3.0927835051546393, 3.3075601374570445, 3.52233676975945, 3.6512027491408934, 3.6941580756013748, 3.7800687285223367, 3.7371134020618557, 3.7800687285223367, 3.7371134020618557, 3.5652920962199315, 3.350515463917526, 3.2216494845360826, 3.178694158075601, 3.049828178694158, 3.006872852233677, 3.006872852233677, 2.8350515463917527, 2.663230240549828, 2.491408934707904, 2.0189003436426116, 1.718213058419244, 1.6323024054982818, 1.3745704467353952, 1.3745704467353952, 2.3195876288659796, 1.331615120274914, 1.0309278350515463, 0.9450171821305842, 0.9450171821305842, 0.7302405498281787, 0.7302405498281787, 0.6872852233676976, 0.6013745704467354, 0.5154639175257731, 0.3006872852233677, 0.2147766323024055, 0.0429553264604811, 0.0429553264604811, 0]

xy = np.array([x, y]).T
_, unique_indices = np.unique(xy[:, 0], return_index=True)

unique_x = xy[unique_indices, 0]
unique_y = xy[unique_indices, 1]



xnew = np.linspace(min(unique_x), max(unique_x), 200) 


# f = interp1d(unique_x, unique_y, kind='quadratic')

# y_smooth=f(xnew)

# plt.plot (xnew,y_smooth)
# plt.scatter (x, y)

spl = make_interp_spline(unique_x, unique_y, k=3)
y_smooth = spl(xnew)

# plt.plot(unique_x,unique_y)
plt.plot(xnew, y_smooth, label='Paper Results', color="black")





# # add labels
plt.xlabel("Fraction Of Stake")
plt.ylabel("Density")

# add grid, legend and title AND show plot
plt.grid(True)
plt.legend()
plt.title("Compare Simulators Geometric Distribution Form With Paper Results")
plt.show()

# save plot as png file
# plt.savefig("simple"+".png")




